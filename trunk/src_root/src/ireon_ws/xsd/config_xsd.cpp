// Copyright (C) 2005-2006 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// In addition, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "config_xsd.h"

namespace ireon
{
  namespace ws
  {
    // CWSConfig
    // 

    const CWSConfig::wsID::type& CWSConfig::
    wsID () const
    {
      return this->_xsd_wsID_.get ();
    }

    CWSConfig::wsID::type& CWSConfig::
    wsID ()
    {
      return this->_xsd_wsID_.get ();
    }

    void CWSConfig::
    wsID (const wsID::type& wsID)
    {
      this->_xsd_wsID_.set (wsID);
    }

    const CWSConfig::worldCfg::type& CWSConfig::worldCfg::
    default_value ()
    {
      return default_value_;
    }

    const CWSConfig::worldCfg::container& CWSConfig::
    worldCfg () const
    {
      return this->_xsd_worldCfg_;
    }

    CWSConfig::worldCfg::container& CWSConfig::
    worldCfg ()
    {
      return this->_xsd_worldCfg_;
    }

    void CWSConfig::
    worldCfg (const worldCfg::type& worldCfg)
    {
      this->_xsd_worldCfg_.set (worldCfg);
    }

    void CWSConfig::
    worldCfg (const worldCfg::container& worldCfg)
    {
      this->_xsd_worldCfg_ = worldCfg;
    }

    void CWSConfig::
    worldCfg (::std::auto_ptr< worldCfg::type > worldCfg)
    {
      this->_xsd_worldCfg_.set (worldCfg);
    }

    const CWSConfig::playerConnectionsListener::container& CWSConfig::
    playerConnectionsListener () const
    {
      return this->_xsd_playerConnectionsListener_;
    }

    CWSConfig::playerConnectionsListener::container& CWSConfig::
    playerConnectionsListener ()
    {
      return this->_xsd_playerConnectionsListener_;
    }

    void CWSConfig::
    playerConnectionsListener (const playerConnectionsListener::type& playerConnectionsListener)
    {
      this->_xsd_playerConnectionsListener_.set (playerConnectionsListener);
    }

    void CWSConfig::
    playerConnectionsListener (const playerConnectionsListener::container& playerConnectionsListener)
    {
      this->_xsd_playerConnectionsListener_ = playerConnectionsListener;
    }

    void CWSConfig::
    playerConnectionsListener (::std::auto_ptr< playerConnectionsListener::type > playerConnectionsListener)
    {
      this->_xsd_playerConnectionsListener_.set (playerConnectionsListener);
    }

    const CWSConfig::rsConnection::container& CWSConfig::
    rsConnection () const
    {
      return this->_xsd_rsConnection_;
    }

    CWSConfig::rsConnection::container& CWSConfig::
    rsConnection ()
    {
      return this->_xsd_rsConnection_;
    }

    void CWSConfig::
    rsConnection (const rsConnection::type& rsConnection)
    {
      this->_xsd_rsConnection_.set (rsConnection);
    }

    void CWSConfig::
    rsConnection (const rsConnection::container& rsConnection)
    {
      this->_xsd_rsConnection_ = rsConnection;
    }

    void CWSConfig::
    rsConnection (::std::auto_ptr< rsConnection::type > rsConnection)
    {
      this->_xsd_rsConnection_.set (rsConnection);
    }

    const CWSConfig::db::type& CWSConfig::
    db () const
    {
      return this->_xsd_db_.get ();
    }

    CWSConfig::db::type& CWSConfig::
    db ()
    {
      return this->_xsd_db_.get ();
    }

    void CWSConfig::
    db (const db::type& db)
    {
      this->_xsd_db_.set (db);
    }

    void CWSConfig::
    db (::std::auto_ptr< db::type > db)
    {
      this->_xsd_db_.set (db);
    }

    const CWSConfig::resources::container& CWSConfig::
    resources () const
    {
      return this->_xsd_resources_;
    }

    CWSConfig::resources::container& CWSConfig::
    resources ()
    {
      return this->_xsd_resources_;
    }

    void CWSConfig::
    resources (const resources::type& resources)
    {
      this->_xsd_resources_.set (resources);
    }

    void CWSConfig::
    resources (const resources::container& resources)
    {
      this->_xsd_resources_ = resources;
    }

    void CWSConfig::
    resources (::std::auto_ptr< resources::type > resources)
    {
      this->_xsd_resources_.set (resources);
    }

    const CWSConfig::playerDefaultPosition::container& CWSConfig::
    playerDefaultPosition () const
    {
      return this->_xsd_playerDefaultPosition_;
    }

    CWSConfig::playerDefaultPosition::container& CWSConfig::
    playerDefaultPosition ()
    {
      return this->_xsd_playerDefaultPosition_;
    }

    void CWSConfig::
    playerDefaultPosition (const playerDefaultPosition::type& playerDefaultPosition)
    {
      this->_xsd_playerDefaultPosition_.set (playerDefaultPosition);
    }

    void CWSConfig::
    playerDefaultPosition (const playerDefaultPosition::container& playerDefaultPosition)
    {
      this->_xsd_playerDefaultPosition_ = playerDefaultPosition;
    }

    void CWSConfig::
    playerDefaultPosition (::std::auto_ptr< playerDefaultPosition::type > playerDefaultPosition)
    {
      this->_xsd_playerDefaultPosition_.set (playerDefaultPosition);
    }


    // CPlayerListener
    // 

    const CPlayerListener::port::type& CPlayerListener::port::
    default_value ()
    {
      return default_value_;
    }

    const CPlayerListener::port::container& CPlayerListener::
    port () const
    {
      return this->_xsd_port_;
    }

    CPlayerListener::port::container& CPlayerListener::
    port ()
    {
      return this->_xsd_port_;
    }

    void CPlayerListener::
    port (const port::type& port)
    {
      this->_xsd_port_.set (port);
    }

    void CPlayerListener::
    port (const port::container& port)
    {
      this->_xsd_port_ = port;
    }

    void CPlayerListener::
    port (::std::auto_ptr< port::type > port)
    {
      this->_xsd_port_.set (port);
    }

    const CPlayerListener::maxConnections::type& CPlayerListener::maxConnections::
    default_value ()
    {
      return default_value_;
    }

    const CPlayerListener::maxConnections::container& CPlayerListener::
    maxConnections () const
    {
      return this->_xsd_maxConnections_;
    }

    CPlayerListener::maxConnections::container& CPlayerListener::
    maxConnections ()
    {
      return this->_xsd_maxConnections_;
    }

    void CPlayerListener::
    maxConnections (const maxConnections::type& maxConnections)
    {
      this->_xsd_maxConnections_.set (maxConnections);
    }

    void CPlayerListener::
    maxConnections (const maxConnections::container& maxConnections)
    {
      this->_xsd_maxConnections_ = maxConnections;
    }

    void CPlayerListener::
    maxConnections (::std::auto_ptr< maxConnections::type > maxConnections)
    {
      this->_xsd_maxConnections_.set (maxConnections);
    }


    // CRSConnection
    // 

    const CRSConnection::ip::type& CRSConnection::ip::
    default_value ()
    {
      return default_value_;
    }

    const CRSConnection::ip::container& CRSConnection::
    ip () const
    {
      return this->_xsd_ip_;
    }

    CRSConnection::ip::container& CRSConnection::
    ip ()
    {
      return this->_xsd_ip_;
    }

    void CRSConnection::
    ip (const ip::type& ip)
    {
      this->_xsd_ip_.set (ip);
    }

    void CRSConnection::
    ip (const ip::container& ip)
    {
      this->_xsd_ip_ = ip;
    }

    void CRSConnection::
    ip (::std::auto_ptr< ip::type > ip)
    {
      this->_xsd_ip_.set (ip);
    }

    const CRSConnection::port::type& CRSConnection::port::
    default_value ()
    {
      return default_value_;
    }

    const CRSConnection::port::container& CRSConnection::
    port () const
    {
      return this->_xsd_port_;
    }

    CRSConnection::port::container& CRSConnection::
    port ()
    {
      return this->_xsd_port_;
    }

    void CRSConnection::
    port (const port::type& port)
    {
      this->_xsd_port_.set (port);
    }

    void CRSConnection::
    port (const port::container& port)
    {
      this->_xsd_port_ = port;
    }

    void CRSConnection::
    port (::std::auto_ptr< port::type > port)
    {
      this->_xsd_port_.set (port);
    }


    // CDBconnection
    // 

    const CDBconnection::ip::type& CDBconnection::ip::
    default_value ()
    {
      return default_value_;
    }

    const CDBconnection::ip::container& CDBconnection::
    ip () const
    {
      return this->_xsd_ip_;
    }

    CDBconnection::ip::container& CDBconnection::
    ip ()
    {
      return this->_xsd_ip_;
    }

    void CDBconnection::
    ip (const ip::type& ip)
    {
      this->_xsd_ip_.set (ip);
    }

    void CDBconnection::
    ip (const ip::container& ip)
    {
      this->_xsd_ip_ = ip;
    }

    void CDBconnection::
    ip (::std::auto_ptr< ip::type > ip)
    {
      this->_xsd_ip_.set (ip);
    }

    const CDBconnection::port::type& CDBconnection::port::
    default_value ()
    {
      return default_value_;
    }

    const CDBconnection::port::container& CDBconnection::
    port () const
    {
      return this->_xsd_port_;
    }

    CDBconnection::port::container& CDBconnection::
    port ()
    {
      return this->_xsd_port_;
    }

    void CDBconnection::
    port (const port::type& port)
    {
      this->_xsd_port_.set (port);
    }

    void CDBconnection::
    port (const port::container& port)
    {
      this->_xsd_port_ = port;
    }

    void CDBconnection::
    port (::std::auto_ptr< port::type > port)
    {
      this->_xsd_port_.set (port);
    }

    const CDBconnection::login::type& CDBconnection::
    login () const
    {
      return this->_xsd_login_.get ();
    }

    CDBconnection::login::type& CDBconnection::
    login ()
    {
      return this->_xsd_login_.get ();
    }

    void CDBconnection::
    login (const login::type& login)
    {
      this->_xsd_login_.set (login);
    }

    void CDBconnection::
    login (::std::auto_ptr< login::type > login)
    {
      this->_xsd_login_.set (login);
    }

    const CDBconnection::password::type& CDBconnection::
    password () const
    {
      return this->_xsd_password_.get ();
    }

    CDBconnection::password::type& CDBconnection::
    password ()
    {
      return this->_xsd_password_.get ();
    }

    void CDBconnection::
    password (const password::type& password)
    {
      this->_xsd_password_.set (password);
    }

    void CDBconnection::
    password (::std::auto_ptr< password::type > password)
    {
      this->_xsd_password_.set (password);
    }

    const CDBconnection::schema::type& CDBconnection::schema::
    default_value ()
    {
      return default_value_;
    }

    const CDBconnection::schema::container& CDBconnection::
    schema () const
    {
      return this->_xsd_schema_;
    }

    CDBconnection::schema::container& CDBconnection::
    schema ()
    {
      return this->_xsd_schema_;
    }

    void CDBconnection::
    schema (const schema::type& schema)
    {
      this->_xsd_schema_.set (schema);
    }

    void CDBconnection::
    schema (const schema::container& schema)
    {
      this->_xsd_schema_ = schema;
    }

    void CDBconnection::
    schema (::std::auto_ptr< schema::type > schema)
    {
      this->_xsd_schema_.set (schema);
    }


    // CResources
    // 

    const CResources::dir::container& CResources::
    dir () const
    {
      return this->_xsd_dir_;
    }

    CResources::dir::container& CResources::
    dir ()
    {
      return this->_xsd_dir_;
    }

    void CResources::
    dir (const dir::container& dir)
    {
      this->_xsd_dir_ = dir;
    }


    // CDefaultPosition
    // 

    const CDefaultPosition::x::type& CDefaultPosition::x::
    default_value ()
    {
      return default_value_;
    }

    const CDefaultPosition::x::type& CDefaultPosition::
    x () const
    {
      return this->_xsd_x_.get ();
    }

    CDefaultPosition::x::type& CDefaultPosition::
    x ()
    {
      return this->_xsd_x_.get ();
    }

    void CDefaultPosition::
    x (const x::type& x)
    {
      this->_xsd_x_.set (x);
    }

    const CDefaultPosition::y::type& CDefaultPosition::y::
    default_value ()
    {
      return default_value_;
    }

    const CDefaultPosition::y::type& CDefaultPosition::
    y () const
    {
      return this->_xsd_y_.get ();
    }

    CDefaultPosition::y::type& CDefaultPosition::
    y ()
    {
      return this->_xsd_y_.get ();
    }

    void CDefaultPosition::
    y (const y::type& y)
    {
      this->_xsd_y_.set (y);
    }


    // CIPv4Address
    // 


    // CPort
    // 


    // CConnectionsNumber
    // 
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

namespace ireon
{
  namespace ws
  {
    // CWSConfig
    //

    // CWSConfig::worldCfg
    // 

    const CWSConfig::worldCfg::type CWSConfig::worldCfg::default_value_ (
      ::std::basic_string< char > ("../data/landscape/world.cfg"), 0, 0, 0);

    CWSConfig::
    CWSConfig (const wsID::type& _xsd_wsID,
               const db::type& _xsd_db)
    : ::xml_schema::type (),
    _xsd_wsID_ (_xsd_wsID,
                ::xml_schema::flags (),
                this),
    _xsd_worldCfg_ (::xml_schema::flags (), this),
    _xsd_playerConnectionsListener_ (::xml_schema::flags (), this),
    _xsd_rsConnection_ (::xml_schema::flags (), this),
    _xsd_db_ (_xsd_db,
              ::xml_schema::flags (),
              this),
    _xsd_resources_ (::xml_schema::flags (), this),
    _xsd_playerDefaultPosition_ (::xml_schema::flags (), this)
    {
    }

    CWSConfig::
    CWSConfig (const CWSConfig& _xsd_CWSConfig,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CWSConfig, f, c),
    _xsd_wsID_ (_xsd_CWSConfig._xsd_wsID_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_worldCfg_ (_xsd_CWSConfig._xsd_worldCfg_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_playerConnectionsListener_ (_xsd_CWSConfig._xsd_playerConnectionsListener_,
                                     f | ::xml_schema::flags::not_root,
                                     this),
    _xsd_rsConnection_ (_xsd_CWSConfig._xsd_rsConnection_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_db_ (_xsd_CWSConfig._xsd_db_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_resources_ (_xsd_CWSConfig._xsd_resources_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_playerDefaultPosition_ (_xsd_CWSConfig._xsd_playerDefaultPosition_,
                                 f | ::xml_schema::flags::not_root,
                                 this)
    {
    }

    CWSConfig::
    CWSConfig (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_wsID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_worldCfg_ (f | ::xml_schema::flags::not_root, this),
    _xsd_playerConnectionsListener_ (f | ::xml_schema::flags::not_root, this),
    _xsd_rsConnection_ (f | ::xml_schema::flags::not_root, this),
    _xsd_db_ (f | ::xml_schema::flags::not_root, this),
    _xsd_resources_ (f | ::xml_schema::flags::not_root, this),
    _xsd_playerDefaultPosition_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CWSConfig::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

        // wsID
        //
        {
          if (e.name () == "wsID" && e.namespace_ ().empty ())
          {
            if (_xsd_wsID_.present ())
              continue;
            this->wsID (
              wsID::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));
            continue;
          }
        }

        // worldCfg
        //
        {
          if (e.name () == "worldCfg" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< worldCfg::type > r (
              worldCfg::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->worldCfg ())
              continue;
            this->worldCfg (r);
            continue;
          }
        }

        // playerConnectionsListener
        //
        {
          if (e.name () == "playerConnectionsListener" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< playerConnectionsListener::type > r (
              playerConnectionsListener::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->playerConnectionsListener ())
              continue;
            this->playerConnectionsListener (r);
            continue;
          }
        }

        // rsConnection
        //
        {
          if (e.name () == "rsConnection" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< rsConnection::type > r (
              rsConnection::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->rsConnection ())
              continue;
            this->rsConnection (r);
            continue;
          }
        }

        // db
        //
        {
          if (e.name () == "db" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< db::type > r (
              db::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (_xsd_db_.present ())
              continue;
            this->db (r);
            continue;
          }
        }

        // resources
        //
        {
          if (e.name () == "resources" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< resources::type > r (
              resources::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->resources ())
              continue;
            this->resources (r);
            continue;
          }
        }

        // playerDefaultPosition
        //
        {
          if (e.name () == "playerDefaultPosition" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< playerDefaultPosition::type > r (
              playerDefaultPosition::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->playerDefaultPosition ())
              continue;
            this->playerDefaultPosition (r);
            continue;
          }
        }
      }

      if (!_xsd_wsID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "wsID",
          "");
      }

      if (!_xsd_db_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "db",
          "");
      }
    }

    CWSConfig* CWSConfig::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CWSConfig (*this, f, c);
    }

    // CPlayerListener
    //

    // CPlayerListener::port
    // 

    const CPlayerListener::port::type CPlayerListener::port::default_value_ (
      ::std::basic_string< char > ("29120"), 0, 0, 0);

    // CPlayerListener::maxConnections
    // 

    const CPlayerListener::maxConnections::type CPlayerListener::maxConnections::default_value_ (
      ::std::basic_string< char > ("10"), 0, 0, 0);

    CPlayerListener::
    CPlayerListener ()
    : ::xml_schema::type (),
    _xsd_port_ (::xml_schema::flags (), this),
    _xsd_maxConnections_ (::xml_schema::flags (), this)
    {
    }

    CPlayerListener::
    CPlayerListener (const CPlayerListener& _xsd_CPlayerListener,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CPlayerListener, f, c),
    _xsd_port_ (_xsd_CPlayerListener._xsd_port_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_maxConnections_ (_xsd_CPlayerListener._xsd_maxConnections_,
                          f | ::xml_schema::flags::not_root,
                          this)
    {
    }

    CPlayerListener::
    CPlayerListener (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_port_ (f | ::xml_schema::flags::not_root, this),
    _xsd_maxConnections_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CPlayerListener::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

        // port
        //
        {
          if (e.name () == "port" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< port::type > r (
              port::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->port ())
              continue;
            this->port (r);
            continue;
          }
        }

        // maxConnections
        //
        {
          if (e.name () == "maxConnections" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< maxConnections::type > r (
              maxConnections::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->maxConnections ())
              continue;
            this->maxConnections (r);
            continue;
          }
        }
      }
    }

    CPlayerListener* CPlayerListener::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CPlayerListener (*this, f, c);
    }

    // CRSConnection
    //

    // CRSConnection::ip
    // 

    const CRSConnection::ip::type CRSConnection::ip::default_value_ (
      ::std::basic_string< char > ("127.0.0.1"), 0, 0, 0);

    // CRSConnection::port
    // 

    const CRSConnection::port::type CRSConnection::port::default_value_ (
      ::std::basic_string< char > ("29105"), 0, 0, 0);

    CRSConnection::
    CRSConnection ()
    : ::xml_schema::type (),
    _xsd_ip_ (::xml_schema::flags (), this),
    _xsd_port_ (::xml_schema::flags (), this)
    {
    }

    CRSConnection::
    CRSConnection (const CRSConnection& _xsd_CRSConnection,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CRSConnection, f, c),
    _xsd_ip_ (_xsd_CRSConnection._xsd_ip_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_port_ (_xsd_CRSConnection._xsd_port_,
                f | ::xml_schema::flags::not_root,
                this)
    {
    }

    CRSConnection::
    CRSConnection (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_ip_ (f | ::xml_schema::flags::not_root, this),
    _xsd_port_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CRSConnection::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

        // ip
        //
        {
          if (e.name () == "ip" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< ip::type > r (
              ip::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->ip ())
              continue;
            this->ip (r);
            continue;
          }
        }

        // port
        //
        {
          if (e.name () == "port" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< port::type > r (
              port::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->port ())
              continue;
            this->port (r);
            continue;
          }
        }
      }
    }

    CRSConnection* CRSConnection::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CRSConnection (*this, f, c);
    }

    // CDBconnection
    //

    // CDBconnection::ip
    // 

    const CDBconnection::ip::type CDBconnection::ip::default_value_ (
      ::std::basic_string< char > ("127.0.0.1"), 0, 0, 0);

    // CDBconnection::port
    // 

    const CDBconnection::port::type CDBconnection::port::default_value_ (
      ::std::basic_string< char > ("3306"), 0, 0, 0);

    // CDBconnection::schema
    // 

    const CDBconnection::schema::type CDBconnection::schema::default_value_ (
      ::std::basic_string< char > ("ws"), 0, 0, 0);

    CDBconnection::
    CDBconnection (const login::type& _xsd_login,
                   const password::type& _xsd_password)
    : ::xml_schema::type (),
    _xsd_ip_ (::xml_schema::flags (), this),
    _xsd_port_ (::xml_schema::flags (), this),
    _xsd_login_ (_xsd_login,
                 ::xml_schema::flags (),
                 this),
    _xsd_password_ (_xsd_password,
                    ::xml_schema::flags (),
                    this),
    _xsd_schema_ (::xml_schema::flags (), this)
    {
    }

    CDBconnection::
    CDBconnection (const CDBconnection& _xsd_CDBconnection,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CDBconnection, f, c),
    _xsd_ip_ (_xsd_CDBconnection._xsd_ip_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_port_ (_xsd_CDBconnection._xsd_port_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_login_ (_xsd_CDBconnection._xsd_login_,
                 f | ::xml_schema::flags::not_root,
                 this),
    _xsd_password_ (_xsd_CDBconnection._xsd_password_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_schema_ (_xsd_CDBconnection._xsd_schema_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    CDBconnection::
    CDBconnection (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_ip_ (f | ::xml_schema::flags::not_root, this),
    _xsd_port_ (f | ::xml_schema::flags::not_root, this),
    _xsd_login_ (f | ::xml_schema::flags::not_root, this),
    _xsd_password_ (f | ::xml_schema::flags::not_root, this),
    _xsd_schema_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CDBconnection::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

        // ip
        //
        {
          if (e.name () == "ip" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< ip::type > r (
              ip::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->ip ())
              continue;
            this->ip (r);
            continue;
          }
        }

        // port
        //
        {
          if (e.name () == "port" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< port::type > r (
              port::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->port ())
              continue;
            this->port (r);
            continue;
          }
        }

        // login
        //
        {
          if (e.name () == "login" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< login::type > r (
              login::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (_xsd_login_.present ())
              continue;
            this->login (r);
            continue;
          }
        }

        // password
        //
        {
          if (e.name () == "password" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< password::type > r (
              password::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (_xsd_password_.present ())
              continue;
            this->password (r);
            continue;
          }
        }

        // schema
        //
        {
          if (e.name () == "schema" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< schema::type > r (
              schema::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            if (this->schema ())
              continue;
            this->schema (r);
            continue;
          }
        }
      }

      if (!_xsd_login_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "login",
          "");
      }

      if (!_xsd_password_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "password",
          "");
      }
    }

    CDBconnection* CDBconnection::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CDBconnection (*this, f, c);
    }

    // CResources
    //

    CResources::
    CResources ()
    : ::xml_schema::type (),
    _xsd_dir_ (::xml_schema::flags (), this)
    {
    }

    CResources::
    CResources (const CResources& _xsd_CResources,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CResources, f, c),
    _xsd_dir_ (_xsd_CResources._xsd_dir_,
               f | ::xml_schema::flags::not_root,
               this)
    {
    }

    CResources::
    CResources (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_dir_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CResources::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

        // dir
        //
        {
          if (e.name () == "dir" && e.namespace_ ().empty ())
          {
            ::std::auto_ptr< dir::type > r (
              dir::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));

            this->dir ().push_back (r);
            continue;
          }
        }
      }
    }

    CResources* CResources::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CResources (*this, f, c);
    }

    // CDefaultPosition
    //

    // CDefaultPosition::x
    // 

    const CDefaultPosition::x::type CDefaultPosition::x::default_value_ (
      ::xsd::cxx::tree::traits< ::xml_schema::float_, char >::create (
        ::std::basic_string< char > ("0"), 0, 0, 0));

    // CDefaultPosition::y
    // 

    const CDefaultPosition::y::type CDefaultPosition::y::default_value_ (
      ::xsd::cxx::tree::traits< ::xml_schema::float_, char >::create (
        ::std::basic_string< char > ("0"), 0, 0, 0));

    CDefaultPosition::
    CDefaultPosition (const x::type& _xsd_x,
                      const y::type& _xsd_y)
    : ::xml_schema::type (),
    _xsd_x_ (_xsd_x,
             ::xml_schema::flags (),
             this),
    _xsd_y_ (_xsd_y,
             ::xml_schema::flags (),
             this)
    {
    }

    CDefaultPosition::
    CDefaultPosition (const CDefaultPosition& _xsd_CDefaultPosition,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CDefaultPosition, f, c),
    _xsd_x_ (_xsd_CDefaultPosition._xsd_x_,
             f | ::xml_schema::flags::not_root,
             this),
    _xsd_y_ (_xsd_CDefaultPosition._xsd_y_,
             f | ::xml_schema::flags::not_root,
             this)
    {
    }

    CDefaultPosition::
    CDefaultPosition (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_x_ (f | ::xml_schema::flags::not_root, this),
    _xsd_y_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CDefaultPosition::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

        // x
        //
        {
          if (e.name () == "x" && e.namespace_ ().empty ())
          {
            if (_xsd_x_.present ())
              continue;
            this->x (
              x::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));
            continue;
          }
        }

        // y
        //
        {
          if (e.name () == "y" && e.namespace_ ().empty ())
          {
            if (_xsd_y_.present ())
              continue;
            this->y (
              y::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));
            continue;
          }
        }
      }

      if (!_xsd_x_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "x",
          "");
      }

      if (!_xsd_y_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "y",
          "");
      }
    }

    CDefaultPosition* CDefaultPosition::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CDefaultPosition (*this, f, c);
    }

    // CIPv4Address
    //

    CIPv4Address::
    CIPv4Address (const _xsd_CIPv4Address::base_& _xsd_CIPv4Address)
    : ::xml_schema::string (_xsd_CIPv4Address)
    {
    }

    CIPv4Address::
    CIPv4Address (const CIPv4Address& _xsd_CIPv4Address,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::string (_xsd_CIPv4Address, f, c)
    {
    }

    CIPv4Address::
    CIPv4Address (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    CIPv4Address::
    CIPv4Address (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    CIPv4Address::
    CIPv4Address (const ::std::basic_string< char >& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    CIPv4Address* CIPv4Address::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CIPv4Address (*this, f, c);
    }

    // CPort
    //

    CPort::
    CPort (const _xsd_CPort::base_& _xsd_CPort)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (_xsd_CPort)
    {
    }

    CPort::
    CPort (const CPort& _xsd_CPort,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (_xsd_CPort, f, c)
    {
    }

    CPort::
    CPort (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (e, f, c)
    {
    }

    CPort::
    CPort (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (a, f, c)
    {
    }

    CPort::
    CPort (const ::std::basic_string< char >& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (s, e, f, c)
    {
    }

    CPort* CPort::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CPort (*this, f, c);
    }

    // CConnectionsNumber
    //

    CConnectionsNumber::
    CConnectionsNumber (const _xsd_CConnectionsNumber::base_& _xsd_CConnectionsNumber)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (_xsd_CConnectionsNumber)
    {
    }

    CConnectionsNumber::
    CConnectionsNumber (const CConnectionsNumber& _xsd_CConnectionsNumber,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (_xsd_CConnectionsNumber, f, c)
    {
    }

    CConnectionsNumber::
    CConnectionsNumber (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (e, f, c)
    {
    }

    CConnectionsNumber::
    CConnectionsNumber (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (a, f, c)
    {
    }

    CConnectionsNumber::
    CConnectionsNumber (const ::std::basic_string< char >& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (s, e, f, c)
    {
    }

    CConnectionsNumber* CConnectionsNumber::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CConnectionsNumber (*this, f, c);
    }
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace ireon
{
  namespace ws
  {
    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (const ::std::basic_string< char >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::ireon::ws::config (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (const ::std::basic_string< char >& u,
            ::xsd::cxx::xml::error_handler< char >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< char > ();
      }

      return ::ireon::ws::config (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (const ::std::basic_string< char >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< char > ();
      }

      return ::ireon::ws::config (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::ireon::ws::config (wrap, f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (::std::istream& is,
            ::xsd::cxx::xml::error_handler< char >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::ireon::ws::config (wrap, h, f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::ireon::ws::config (wrap, h, f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (::std::istream& is,
            const ::std::basic_string< char >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::ireon::ws::config (wrap, f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (::std::istream& is,
            const ::std::basic_string< char >& sid,
            ::xsd::cxx::xml::error_handler< char >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::ireon::ws::config (wrap, h, f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (::std::istream& is,
            const ::std::basic_string< char >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::ireon::ws::config (wrap, h, f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::ireon::ws::config (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< char >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< char > ();
      }

      return ::ireon::ws::config (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< char > ();
      }

      return ::ireon::ws::config (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::ireon::ws::CWSConfig >
    config (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< char > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      if (e.name () == "config" &&
          e.namespace_ () == "http://www.ireon.org/ireon/ws/")
      {
        ::std::auto_ptr< ::ireon::ws::CWSConfig > r (
          ::xsd::cxx::tree::traits< ::ireon::ws::CWSConfig, char >::create (
            e.dom_element (), f, 0));
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        e.name (),
        e.namespace_ (),
        "config",
        "http://www.ireon.org/ireon/ws/");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace ireon
{
  namespace ws
  {
    void
    config (::xercesc::DOMDocument& d,
            const ::ireon::ws::CWSConfig& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< char > e (*d.getDocumentElement ());

      if (e.name () == "config" &&
          e.namespace_ () == "http://www.ireon.org/ireon/ws/")
      {
        e.dom_element () << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          e.name (),
          e.namespace_ (),
          "config",
          "http://www.ireon.org/ireon/ws/");
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    config (const ::ireon::ws::CWSConfig& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< char >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "config",
            "http://www.ireon.org/ireon/ws/",
            m,
            f));
        ::ireon::ws::config (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
      }
    }

    void
    config (::xercesc::XMLFormatTarget& t,
            const ::ireon::ws::CWSConfig& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< char >& m,
            const ::std::basic_string< char >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::ireon::ws::config (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    config (::xercesc::XMLFormatTarget& t,
            const ::ireon::ws::CWSConfig& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< char >& m,
            ::xsd::cxx::xml::error_handler< char >& h,
            const ::std::basic_string< char >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::ireon::ws::config (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    config (::xercesc::XMLFormatTarget& t,
            const ::ireon::ws::CWSConfig& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< char >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< char >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::ireon::ws::config (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    config (::std::ostream& o,
            const ::ireon::ws::CWSConfig& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< char >& m,
            const ::std::basic_string< char >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::ireon::ws::config (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    config (::std::ostream& o,
            const ::ireon::ws::CWSConfig& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< char >& m,
            ::xsd::cxx::xml::error_handler< char >& h,
            const ::std::basic_string< char >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::ireon::ws::config (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    config (::std::ostream& o,
            const ::ireon::ws::CWSConfig& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< char >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< char >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::ireon::ws::config (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CWSConfig& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::element< char > s (
          "wsID",
          e);
        s.dom_element () << i.wsID ();
      }

      {
        if (i.worldCfg ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "worldCfg",
            e);
          s.dom_element () << *i.worldCfg ();
        }
      }

      {
        if (i.playerConnectionsListener ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "playerConnectionsListener",
            e);
          s.dom_element () << *i.playerConnectionsListener ();
        }
      }

      {
        if (i.rsConnection ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "rsConnection",
            e);
          s.dom_element () << *i.rsConnection ();
        }
      }

      {
        ::xsd::cxx::xml::dom::element< char > s (
          "db",
          e);
        s.dom_element () << i.db ();
      }

      {
        if (i.resources ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "resources",
            e);
          s.dom_element () << *i.resources ();
        }
      }

      {
        if (i.playerDefaultPosition ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "playerDefaultPosition",
            e);
          s.dom_element () << *i.playerDefaultPosition ();
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CPlayerListener& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        if (i.port ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "port",
            e);
          s.dom_element () << *i.port ();
        }
      }

      {
        if (i.maxConnections ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "maxConnections",
            e);
          s.dom_element () << *i.maxConnections ();
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CRSConnection& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        if (i.ip ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "ip",
            e);
          s.dom_element () << *i.ip ();
        }
      }

      {
        if (i.port ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "port",
            e);
          s.dom_element () << *i.port ();
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CDBconnection& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        if (i.ip ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "ip",
            e);
          s.dom_element () << *i.ip ();
        }
      }

      {
        if (i.port ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "port",
            e);
          s.dom_element () << *i.port ();
        }
      }

      {
        ::xsd::cxx::xml::dom::element< char > s (
          "login",
          e);
        s.dom_element () << i.login ();
      }

      {
        ::xsd::cxx::xml::dom::element< char > s (
          "password",
          e);
        s.dom_element () << i.password ();
      }

      {
        if (i.schema ())
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "schema",
            e);
          s.dom_element () << *i.schema ();
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CResources& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        for (CResources::dir::const_iterator
             b (i.dir ().begin ()), n (i.dir ().end ());
             b != n; ++b)
        {
          ::xsd::cxx::xml::dom::element< char > s (
            "dir",
            e);
          s.dom_element () << *b;
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CDefaultPosition& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::element< char > s (
          "x",
          e);
        s.dom_element () << i.x ();
      }

      {
        ::xsd::cxx::xml::dom::element< char > s (
          "y",
          e);
        s.dom_element () << i.y ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CIPv4Address& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const CIPv4Address& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< char >& l,
                const CIPv4Address& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CPort& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const CPort& i)
    {
      a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< char >& l,
                const CPort& i)
    {
      l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CConnectionsNumber& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const CConnectionsNumber& i)
    {
      a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< char >& l,
                const CConnectionsNumber& i)
    {
      l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type >& > (i);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

