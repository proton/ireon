
// Vertex program for automatic terrain texture generation
void main_vp
(
    float4             iPosition           : POSITION,
	float4             iNormal             : NORMAL,
	float4             iTexcoord           : TEXCOORD0,
    float4              iLodpos             : BLENDWEIGHT,
    //float4              iLodpos             : TEXCOORD1,

	out float4         oPosition           : POSITION,
	out float4         oTexcoord           : TEXCOORD0,
	out float4         oCoverage           : TEXCOORD1,
	out float4         oScaled             : TEXCOORD2,
	//out float4         oFog              : TEXCOORD3,

	uniform float4x4   worldViewProj,
	uniform float4     lightDirection,
	uniform float4     ambientLight,

	uniform float4     compressionSettings,
	uniform float4     splatSettings,
	uniform float4     fogSettings,
	uniform float4     fogColour
)
{
    // Calculate the output position and texture coordinates using textures coordinates input.
    float height = ((iPosition.x + 32768) + (iLodpos.x - iPosition.x) * compressionSettings[3]) * compressionSettings[1];

    //float height  = (iPosition.x + 32768)* compressionSettings[1];
    //height = height + (iLodpos.x - height) * compressionSettings[3];

	oPosition = float4(iTexcoord.x*compressionSettings[0], height, iTexcoord.y*compressionSettings[2], 1.0);

    // Transform the current vertex from object space to clip space, since OpenGL isn't doing it for us
    // as long we're using a vertex shader
	oPosition  = mul(worldViewProj, oPosition);

    float no_rock_factor = saturate (iNormal.y);
    //float no_rock_factor = clamp (iNormal.y, 0.0, 1.0);

    // SAND  < configSettings[0]
	oCoverage.x = (height < splatSettings[0])?
                    saturate ((1.0 - (height / splatSettings[0])) * no_rock_factor)
                :
                    0.0;

    //  splatSettings[0] < GRASS < splatSettings[0]
	oCoverage.y = (height < splatSettings[0])?
                        saturate ((height / splatSettings[0])  * no_rock_factor)
                    :
                       ((height < splatSettings[1])?
                            saturate ((1.0 - (height - splatSettings[0]) / (splatSettings[1] - splatSettings[0])) * no_rock_factor)
                        :
                            0.0);


    //  splatSettings[0] < ROCK < splatSettings[0]
	oCoverage.z = (height > splatSettings[0])?
                        ((height < splatSettings[1])?
                            saturate (((height - splatSettings[0]) / (splatSettings[1] - splatSettings[0])) * no_rock_factor)
                        :
                            saturate ((1.0 - (height - splatSettings[1]) / (splatSettings[2] - splatSettings[1])) * no_rock_factor))
                    :
                        0.0;


    //  splatSettings[1] < SNOW <
	oCoverage.w = (height > splatSettings[1])?
                        saturate (((height - splatSettings[1]) / (splatSettings[2] - splatSettings[1])) * no_rock_factor)
                    :
                        0.0;

    float rock_factor = 1.0 - no_rock_factor;
    oCoverage.z = saturate (oCoverage.z + rock_factor);

    //float fog = saturate(( oPosition.z - fogSettings[0] ) / (fogSettings[1] - fogSettings[0])) * fogSettings[2];
    //oColor0 = (1.0 - fog) * (color * (1.0 - rock_factor));
    //oColor1 = (1.0 - fog) * (color * rock_factor);
    //oFog = fogColour * fog;

    //float distance_fact = saturate (1.0 - (oPosition.z / configSettings[3]));
	//oTexcoord = float4(iTexcoord.x, iTexcoord.y, distance_fact, 0.0);

    oTexcoord = float4(iTexcoord.x, iTexcoord.y, 0.0, 0.0);
    oScaled = oTexcoord * 20.0f;
}

// Fragment program for automatic terrain texture generation
void main_fp
(
    float4              iTexcoord	: TEXCOORD0,
    float4              iCoverage	: TEXCOORD1,
    float4              iScaled	    : TEXCOORD2,

	out float4          oColor		: COLOR,

    uniform sampler2D   textureUnit0,
    uniform sampler2D   textureUnit1,
    uniform sampler2D   textureUnit2,
    uniform sampler2D   textureUnit3
)
{
	oColor = (tex2D(textureUnit0, iScaled.xy) * iCoverage.x) + (tex2D(textureUnit1, iScaled.xy) * iCoverage.y) + (tex2D(textureUnit2, iScaled.xy) *  iCoverage.z) + (tex2D(textureUnit3, iScaled.xy) *  iCoverage.w);

	//oColor = oColor * float4 (tex2D(textureUnit1, iScaled.xy).rgb, iTexcoord.z);
}

